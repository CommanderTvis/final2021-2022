// @strict-types

Процедура ПередЗаписью(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчество) Тогда
		Наименование = Фамилия + " " + Имя + " " + Отчество;
		Логин = Фамилия + Лев(Имя, 1) + Лев(Отчество, 1);
	Иначе
		Наименование = Фамилия + " " + Имя;
		Логин = Фамилия + Лев(Имя, 1);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИнформационнойБазы);

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиИнформационнойБазы.НайтиПоИмени(Логин);
		
		Если Пользователь = Неопределено Тогда
			Пользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
		КонецЕсли;
	КонецЕсли;

	Пользователь.Имя = Логин;
	Пользователь.ПолноеИмя = Наименование;
	
	Для Каждого Роль Из Метаданные.Роли Цикл
		Если Роль.Синоним = Должность.Наименование Тогда
			Пользователь.Роли.Добавить(Роль);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Пользователь.АутентификацияСтандартная = Истина;
	Пользователь.Пароль = Логин;
	Пользователь.АдресЭлектроннойПочты = ЭлектроннаяПочта;
	Пользователь.ПолноеИмя = Наименование;
	Пользователь.Записать();
	ИдентификаторПользователяИнформационнойБазы = Пользователь.УникальныйИдентификатор;
КонецПроцедуры


Процедура ПередУдалением(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИнформационнойБазы);
	Если Пользователь <> Неопределено Тогда
		Пользователь.Удалить();
	КонецЕсли;
КонецПроцедуры
