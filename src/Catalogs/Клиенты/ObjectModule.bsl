//@strict-types

Процедура ПередЗаписью(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если Не ПроверкаУникальностиВызовСервера.ПрошелКонтрольУникальностиСправочникаПоРеквизиту(
		Новый Структура("Наименование", Наименование), Ссылка) Тогда
		СообщенияКлиентСервер.СообщитьСоСвойствами("Логин должен быть уникальным.", "Наименование", ЭтотОбъект);
		Отказ = Истина;
	КонецЕсли;

	Если Не ПроверкаУникальностиВызовСервера.ПрошелКонтрольУникальностиСправочникаПоРеквизиту(
		Новый Структура("НомерТелефона", НомерТелефона), Ссылка) Тогда
		СообщенияКлиентСервер.СообщитьСоСвойствами("Номер телефона должен быть уникальным.", "НомерТелефона",
			ЭтотОбъект);
		Отказ = Истина;
	КонецЕсли;

	Если Не ПроверкаУникальностиВызовСервера.ПрошелКонтрольУникальностиСправочникаПоРеквизиту(
		Новый Структура("ЭлектроннаяПочта", ЭлектроннаяПочта), Ссылка) Тогда
		СообщенияКлиентСервер.СообщитьСоСвойствами("Электронная почта должна быть уникальной.", "ЭлектроннаяПочта",
			ЭтотОбъект);
		Отказ = Истина;
	КонецЕсли;

	Если ЗначениеЗаполнено(Отчество) И ЗначениеЗаполнено(Фамилия) И ЗначениеЗаполнено(Имя) Тогда
		ФИО = Фамилия + " " + Имя + " " + Отчество;
	ИначеЕсли ЗначениеЗаполнено(Фамилия) И ЗначениеЗаполнено(Имя) Тогда
		ФИО = Фамилия + " " + Имя;
	ИначеЕсли ЗначениеЗаполнено(Фамилия) Тогда
		ФИО = Фамилия;
	ИначеЕсли ЗначениеЗаполнено(Имя) Тогда
		ФИО = Имя;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИнформационнойБазы);

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
	КонецЕсли;

	Пользователь.АдресЭлектроннойПочты = ЭлектроннаяПочта;
	Пользователь.Имя = Наименование;
	Пользователь.АутентификацияСтандартная = Истина;
	Пользователь.Пароль = Пароль;
	Пользователь.Роли.Добавить(Метаданные.Роли.Пользователь);
	Пользователь.Записать();
	ИдентификаторПользователяИнформационнойБазы = Пользователь.УникальныйИдентификатор;
КонецПроцедуры


Процедура ПередУдалением(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ИдентификаторПользователяИнформационнойБазы);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь.Удалить();
	КонецЕсли;
КонецПроцедуры